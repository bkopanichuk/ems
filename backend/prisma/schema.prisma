generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                String         @id @default(uuid())
  login             String         @unique
  password          String
  displayName       String?
  role              Role           @default(USER)
  isBlocked         Boolean        @default(false)
  lastLoginAt       DateTime?
  loginCount        Int            @default(0)
  failedLoginAttempts Int          @default(0)
  lockedUntil       DateTime?
  deletedAt         DateTime?      // Soft delete timestamp
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  refreshTokens     RefreshToken[]
  auditLogs         AuditLog[]
  inverters         Inverter[]

  @@index([deletedAt])
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  revokedAt   DateTime?
  userAgent   String?
  ipAddress   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  action      String
  entityType  String?
  entityId    String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Inverter {
  id                String   @id @default(uuid())
  name              String
  chargeCapacity    Float    // Мощность зарядки (кВт)
  dischargeCapacity Float    // Мощность разрядки (кВт)
  batteryCapacity   Float    // Объем аккумулятора (кВт·ч)
  webUrl            String?  // Веб адрес для управления
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
