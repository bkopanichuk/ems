version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ems_postgres_prod
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-ems_db}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - ems_network_prod
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: ems_backend_prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-ems_db}?schema=public
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      ADMIN_LOGIN: ${ADMIN_LOGIN}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_DISPLAY_NAME: ${ADMIN_DISPLAY_NAME:-Administrator}
      PORT: 3000
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    depends_on:
      - postgres
    networks:
      - ems_network_prod
    restart: unless-stopped
    command: sh -c "npm run prisma:migrate:deploy && npm run prisma:seed && npm run start:prod"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: ems_frontend_prod
    environment:
      NODE_ENV: production
      NUXT_PUBLIC_API_BASE_URL: ${API_BASE_URL:-http://localhost/api}
    depends_on:
      - backend
    networks:
      - ems_network_prod
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: ems_nginx_prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - ems_network_prod
    restart: unless-stopped

networks:
  ems_network_prod:
    driver: bridge

volumes:
  postgres_data_prod: