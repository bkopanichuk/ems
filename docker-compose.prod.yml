version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ems-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-ems_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - ems-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-ems_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (Nest.js)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ems-backend-prod
    restart: always
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@db:5432/${DB_NAME:-ems_db}?schema=public
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3001
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ems-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nuxt.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ems-frontend-prod
    restart: always
    environment:
      - NODE_ENV=production
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - ems-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
    driver: local

networks:
  ems-network:
    driver: bridge